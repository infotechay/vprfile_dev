
# name: Delete Stale Branches

# on:
#   schedule:
#     - cron: '0 0 * * *' # Runs daily at midnight
#   workflow_dispatch: # Allows manual triggering

# jobs:
#   delete-stale-branches:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Install GitHub CLI and jq
#       - name: Install GitHub CLI and jq
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y gh jq

#       # Step 2: Authenticate GitHub CLI
#       - name: Authenticate GitHub CLI
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
#         run: |
#           echo $GITHUB_TOKEN | gh auth login --with-token

#       # Step 3: Define Target Repositories
#       - name: Define Target Repositories
#         id: define_repos
#         run: |
#           # List of repositories to process
#           target_repositories=(
#             "infotechay/mnc-fancy-nano"
#           )

#           echo "repos=${target_repositories[@]}" >> $GITHUB_ENV

#       # Step 4: Delete Stale Branches
#       - name: Delete Stale Branches
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
#         run: |
#           # Calculate cutoff time (6 months ago in seconds)
#           cutoff_time=$(date -d "6 months ago" +%s)
#           echo "Cutoff time for stale branches: $cutoff_time (6 months ago)"

#           # Loop through each repository
#           for repo in ${{ env.repos }}; do
#             echo "Processing repository: $repo"

#             # Fetch all branches
#             raw_branches=$(gh api repos/$repo/branches 2>&1 || echo "ERROR")

#             # Handle API failures
#             if [[ "$raw_branches" == "ERROR" || "$raw_branches" == *"Not Found"* || -z "$raw_branches" ]]; then
#               echo "Failed to fetch branches for repository: $repo. Skipping..."
#               continue
#             fi

#             # Validate JSON response
#             if ! echo "$raw_branches" | jq empty >/dev/null 2>&1; then
#               echo "Invalid JSON received for repository: $repo. Response:"
#               echo "$raw_branches"
#               continue
#             fi

#             # Extract branch names
#             all_branches=$(echo "$raw_branches" | jq -r '.[].name')

#             if [[ -z "$all_branches" ]]; then
#               echo "No branches found in repository: $repo."
#               continue
#             fi

#             echo "Found branches in repository: $repo"
#             echo "$all_branches"

#             # Process each branch
#             for branch in $all_branches; do
#               echo "Processing branch: $branch"

#               # Exclude important branches
#               if [[ "$branch" == "production" || "$branch" == "non-prod" || "$branch" == "development" ]]; then
#                 echo "Skipping important branch: $branch"
#                 continue
#               fi

#               # Get branch last commit date
#               branch_date=$(gh api repos/$repo/commits/$branch --jq '.commit.committer.date' 2>&1 || echo "ERROR")
#               if [[ "$branch_date" == "ERROR" ]]; then
#                 echo "Failed to fetch commit date for branch: $branch. Skipping..."
#                 continue
#               fi

#               # Convert date to timestamp
#               branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "ERROR")
#               if [[ "$branch_timestamp" == "ERROR" ]]; then
#                 echo "Failed to parse date for branch: $branch. Skipping..."
#                 continue
#               fi

#               # Check if branch is stale (older than 6 months)
#               if [[ "$branch_timestamp" -le "$cutoff_time" ]]; then
#                 echo "Deleting stale branch: $branch (older than 6 months)"
#                 gh api -X DELETE repos/$repo/git/refs/heads/$branch || echo "Failed to delete branch: $branch"
#               else
#                 echo "Branch $branch is not stale. Skipping..."
#               fi
#             done
#           done




# Step 4: Delete Stale Branches
- name: Delete Stale Branches
  env:
    GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
  run: |
    # Calculate cutoff time (6 months ago in seconds)
    cutoff_time=$(date -d "6 months ago" +%s)
    echo "Cutoff time for stale branches: $cutoff_time (6 months ago)"

    # Loop through each repository
    for repo in ${{ env.repos }}; do
      echo "Processing repository: $repo"

      page=1
      all_branches=""

      # Fetch branches with pagination
      while true; do
        raw_branches=$(gh api repos/$repo/branches --paginate --jq '.[] | {name: .name}' --per-page 100 --page $page || echo "ERROR")

        # Handle API failures
        if [[ "$raw_branches" == "ERROR" || "$raw_branches" == *"Not Found"* || -z "$raw_branches" ]]; then
          echo "Failed to fetch branches for repository: $repo. Skipping..."
          break
        fi

        # Validate JSON response
        if ! echo "$raw_branches" | jq empty >/dev/null 2>&1; then
          echo "Invalid JSON received for repository: $repo. Response:"
          echo "$raw_branches"
          break
        fi

        # Append branches to the list
        new_branches=$(echo "$raw_branches" | jq -r '.[].name')
        all_branches="$all_branches"$'\n'"$new_branches"

        # Check if the last page was reached
        if [[ -z "$new_branches" ]]; then
          break
        fi

        page=$((page + 1))
      done

      # Remove duplicate blank lines
      all_branches=$(echo "$all_branches" | sed '/^$/d')

      if [[ -z "$all_branches" ]]; then
        echo "No branches found in repository: $repo."
        continue
      fi

      echo "Found branches in repository: $repo"
      echo "$all_branches"

      # Process each branch
      for branch in $all_branches; do
        echo "Processing branch: $branch"

        # Exclude important branches
        if [[ "$branch" == "production" || "$branch" == "non-prod" || "$branch" == "development" ]]; then
          echo "Skipping important branch: $branch"
          continue
        fi

        # Get branch last commit date
        branch_date=$(gh api repos/$repo/commits/$branch --jq '.commit.committer.date' 2>&1 || echo "ERROR")
        if [[ "$branch_date" == "ERROR" ]]; then
          echo "Failed to fetch commit date for branch: $branch. Skipping..."
          continue
        fi

        # Convert date to timestamp
        branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "ERROR")
        if [[ "$branch_timestamp" == "ERROR" ]]; then
          echo "Failed to parse date for branch: $branch. Skipping..."
          continue
        fi

        # Check if branch is stale (older than 6 months)
        if [[ "$branch_timestamp" -le "$cutoff_time" ]]; then
          echo "Deleting stale branch: $branch (older than 6 months)"
          gh api -X DELETE repos/$repo/git/refs/heads/$branch || echo "Failed to delete branch: $branch"
        else
          echo "Branch $branch is not stale. Skipping..."
        fi
      done
    done


####

name: Delete Stale Branches

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install GitHub CLI and jq
      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      # Step 2: Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | gh auth login --with-token

      # Step 3: Define Target Repositories
      - name: Define Target Repositories
        id: define_repos
        run: |
          # List of repositories to process
          target_repositories=(
            "infotechay/mnc-fancy-nano"
            "infotechay/mt-ndj-serf-fhk"
          )

          echo "repos=${target_repositories[@]}" >> $GITHUB_ENV

      # Step 4: Delete Stale Branches
      - name: Delete Stale Branches
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Calculate cutoff time (6 months ago in seconds)
          cutoff_time=$(date -d "6 months ago" +%s)
          echo "Cutoff time for stale branches: $cutoff_time (6 months ago)"

          # Loop through each repository
          for repo in ${{ env.repos }}; do
            echo "Processing repository: $repo"

            page=1
            all_branches=""

            # Fetch branches with pagination
            while true; do
              echo "Fetching page $page for repository $repo"
              raw_branches=$(gh api "repos/$repo/branches?per_page=100&page=$page" || echo "ERROR")

              # Handle API failures
              if [[ "$raw_branches" == "ERROR" || "$raw_branches" == *"Not Found"* || -z "$raw_branches" ]]; then
                echo "Failed to fetch branches for repository: $repo. Skipping..."
                break
              fi

              # Validate JSON response
              if ! echo "$raw_branches" | jq empty >/dev/null 2>&1; then
                echo "Invalid JSON received for repository: $repo. Response:"
                echo "$raw_branches"
                break
              fi

              # Extract branch names
              new_branches=$(echo "$raw_branches" | jq -r '.[].name')

              # If no new branches are found, break the loop
              if [[ -z "$new_branches" ]]; then
                break
              fi

              # Append new branches to the list
              all_branches="$all_branches"$'\n'"$new_branches"

              # Increment page number for next request
              page=$((page + 1))
            done

            # Remove duplicate blank lines
            all_branches=$(echo "$all_branches" | sed '/^$/d')

            if [[ -z "$all_branches" ]]; then
              echo "No branches found in repository: $repo."
              continue
            fi

            echo "Found branches in repository: $repo"
            echo "$all_branches"

            # Process each branch
            for branch in $all_branches; do
              echo "Processing branch: $branch"

              # Exclude important branches
              if [[ "$branch" == "production" || "$branch" == "non-prod" || "$branch" == "development" ]]; then
                echo "Skipping important branch: $branch"
                continue
              fi

              # Get branch last commit date
              branch_date=$(gh api "repos/$repo/commits/$branch" --jq '.commit.committer.date' 2>&1 || echo "ERROR")
              if [[ "$branch_date" == "ERROR" ]]; then
                echo "Failed to fetch commit date for branch: $branch. Skipping..."
                continue
              fi

              # Convert date to timestamp
              branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "ERROR")
              if [[ "$branch_timestamp" == "ERROR" ]]; then
                echo "Failed to parse date for branch: $branch. Skipping..."
                continue
              fi

              # Check if branch is stale (older than 6 months)
              if [[ "$branch_timestamp" -le "$cutoff_time" ]]; then
                echo "Deleting stale branch: $branch (older than 6 months)"
                gh api -X DELETE "repos/$repo/git/refs/heads/$branch" || echo "Failed to delete branch: $branch"
              else
                echo "Branch $branch is not stale. Skipping..."
              fi
            done
          done




