name: Delete Stale Branches

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering

jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install GitHub CLI and jq
      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      # Step 2: Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | gh auth login --with-token

      # Step 3: Define Target Repositories
      - name: Define Target Repositories
        id: define_repos
        run: |
          # List of repositories to process
          target_repositories=(
            "infotechay/mnc-fancy-nano"
          )

          # Format repositories as a comma-separated string
          echo "repos=$(IFS=,; echo "${target_repositories[*]}")" >> $GITHUB_ENV

      # Step 4: Delete Stale Branches
      - name: Delete Stale Branches
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          repos: ${{ env.repos }}
        run: |
          # Calculate cutoff time (6 months ago in seconds)
          cutoff_time=$(date -d "6 months ago" +%s)
          echo "Cutoff time for stale branches: $cutoff_time (6 months ago)"

          # Loop through each repository
          for repo in ${repos//,/ }; do
            echo "Processing repository: $repo"

            # Initialize variables for pagination
            page=1
            has_more=true
            all_branches=()

            # Fetch all branches using pagination
            while $has_more; do
              echo "Fetching branches from page $page for repository: $repo"

              # Fetch branches for the current page
              raw_branches=$(gh api repos/$repo/branches -F per_page=100 -F page=$page 2>&1 || echo "ERROR")

              # Debug: Print raw response for inspection
              echo "Raw response for page $page:"
              echo "$raw_branches"

              # Handle API errors
              if [[ "$raw_branches" == "ERROR" || "$raw_branches" == *"Not Found"* || -z "$raw_branches" ]]; then
                echo "Failed to fetch branches for repository: $repo. Skipping..."
                break
              fi

              # Validate JSON response
              if ! echo "$raw_branches" | jq empty >/dev/null 2>&1; then
                echo "Invalid JSON received for repository: $repo. Skipping further processing."
                break
              fi

              # Extract branch names
              branches=$(echo "$raw_branches" | jq -r '.[].name')
              if [[ -z "$branches" ]]; then
                echo "No more branches found in repository: $repo."
                has_more=false
                break
              fi

              # Append to the list of all branches
              all_branches+=($branches)

              # If fewer than 100 branches were fetched, assume this is the last page
              [[ $(echo "$branches" | wc -l) -lt 100 ]] && has_more=false || ((page++))
            done

            # Validate branches
            if [[ ${#all_branches[@]} -eq 0 ]]; then
              echo "No branches found in repository: $repo."
              continue
            fi

            echo "Total branches fetched in repository: ${#all_branches[@]}"

            # Process each branch
            for branch in "${all_branches[@]}"; do
              echo "Processing branch: $branch"

              # Exclude important branches
              if [[ "$branch" == "production" || "$branch" == "main" || "$branch" == "development" ]]; then
                echo "Skipping important branch: $branch"
                continue
              fi

              # Get branch last commit date
              branch_date=$(gh api repos/$repo/commits/$branch --jq '.commit.committer.date' 2>&1 || echo "ERROR")
              if [[ "$branch_date" == "ERROR" ]]; then
                echo "Failed to fetch commit date for branch: $branch. Skipping..."
                continue
              fi

              # Convert date to timestamp
              branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "ERROR")
              if [[ "$branch_timestamp" == "ERROR" ]]; then
                echo "Failed to parse date for branch: $branch. Skipping..."
                continue
              fi

              # Check if branch is stale (older than 6 months)
              if [[ "$branch_timestamp" -le "$cutoff_time" ]]; then
                echo "Deleting stale branch: $branch (older than 6 months)"
                gh api -X DELETE repos/$repo/git/refs/heads/$branch || echo "Failed to delete branch: $branch"
              else
                echo "Branch $branch is not stale. Skipping..."
              fi
            done
          done


