# on:
#   schedule:
#     - cron: '0 0 * * *' # Runs daily at midnight
#   workflow_dispatch: # Allows manual triggering of the workflow

# jobs:
#   delete-stale-branches:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Install GitHub CLI and jq
#       - name: Install GitHub CLI and jq
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y gh jq

#       # Step 2: Define List of Target Repositories
#       - name: Define Target Repositories
#         run: |
#           # List of repositories to test (modify as needed)
#           target_repositories=(
#                "infotechay/Repo1"
#                "infotechay/tomcat_udemy"
#                "infotechay/gke-cicd"
#           )

#           # Export the list for further steps
#           echo "TARGET_REPOS=${target_repositories[@]}" >> $GITHUB_ENV

#       # Step 3: Delete Stale Feature Branches Older Than 6 Months
#       - name: Delete Stale Feature Branches
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
#         run: |
#           # Cutoff time for stale branches (6 months ago)
#           cutoff_time=$(date --date="6 months ago" +%s)
#           org="infotechay" # Replace with your org name

#           # Define branches to exclude
#           excluded_branches=("production" "non-prod" "development")

#           # Function to check if a branch is in the exclusion list
#           is_excluded_branch() {
#             local branch_name=$1
#             for excluded in "${excluded_branches[@]}"; do
#               if [[ "$branch_name" == "$excluded" ]]; then
#                 return 0 # It's excluded
#               fi
#             done
#             return 1 # Not excluded
#           }

#           # Loop through each repository in the list
#           for repo in $TARGET_REPOS; do
#             echo "Processing repository: $repo"

#             # Fetch all branches
#             raw_branches=$(gh api repos/$repo/branches 2>/dev/null || echo "ERROR")
#             if [ "$raw_branches" == "ERROR" ]; then
#               echo "Failed to fetch branches for $repo. Skipping..."
#               continue
#             fi

#             # Filter branches starting with "feature/"
#             feature_branches=$(echo "$raw_branches" | jq -r '.[] | select(.name | startswith("feature/")) | .name')

#             if [ -z "$feature_branches" ]; then
#               echo "No feature branches to process in repository $repo."
#               continue
#             fi

#             # Loop through each feature branch
#             for branch in $feature_branches; do
#               # Skip excluded branches
#               if is_excluded_branch "$branch"; then
#                 echo "Skipping important branch: $branch"
#                 continue
#               fi

#               echo "Processing branch: $branch"

#               # Get the branch creation date
#               branch_date=$(gh api repos/$repo/commits/$branch --jq '.commit.committer.date' 2>/dev/null || echo "ERROR")
#               if [ "$branch_date" == "ERROR" ]; then
#                 echo "Failed to fetch commit date for branch: $branch. Skipping..."
#                 continue
#               fi

#               # Convert the branch date to a timestamp
#               branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "ERROR")
#               if [ "$branch_timestamp" == "ERROR" ]; then
#                 echo "Failed to parse date for branch: $branch. Skipping..."
#                 continue
#               fi

#               # Check if branch is older or equal to 6 months
#               if [ "$branch_timestamp" -le "$cutoff_time" ]; then
#                 echo "Deleting stale branch: $branch (older than 6 months)"
#                 gh api -X DELETE /repos/$repo/git/refs/heads/$branch || echo "Failed to delete branch: $branch"
#               else
#                 echo "Branch $branch is not stale. Skipping..."
#               fi
#             done
#           done




name: Delete Stale Feature Branches

on:
  push:
     branches:
          - master
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering




jobs:
  delete-stale-branches:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # Step 2: Define and Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | gh auth login --with-token

      # Step 3: Define Target Repositories
      - name: Define Target Repositories
        id: define_repos
        run: |
          # List of repositories to process
          target_repositories=(
            "infotechay/Repo1"
            "infotechay/tomcat_udemy"
            "infotechay/gke-cicd"
          )

          # Convert array to JSON string
          echo "repos=${target_repositories[@]}" >> $GITHUB_ENV

      # Step 4: Delete Stale Feature Branches
      - name: Delete Stale Feature Branches
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          CUTOFF_TIME: $(date -d "6 months ago" +%s)
        run: |
          echo "Cutoff time for stale branches: 6 months ago"

          # Loop through each repository
          for repo in ${{ env.repos }}; do
            echo "Processing repository: $repo"

            # Fetch branches safely
            raw_branches=$(gh api repos/$repo/branches 2>&1 || echo "ERROR")

            # Handle API failures
            if [[ "$raw_branches" == "ERROR" || "$raw_branches" == *"Not Found"* || -z "$raw_branches" ]]; then
              echo "Failed to fetch branches for repository: $repo. Skipping..."
              continue
            fi

            # Validate JSON response
            if ! echo "$raw_branches" | jq empty >/dev/null 2>&1; then
              echo "Invalid JSON received for repository: $repo. Skipping..."
              continue
            fi

            # Filter branches starting with specific prefixes
            feature_branches=$(echo "$raw_branches" | jq -r '.[] | select(.name | test("^(feature/|gke-cicd|mnc-)")) | .name')

            if [[ -z "$feature_branches" ]]; then
              echo "No matching feature branches found in repository: $repo."
              continue
            fi

            echo "Found branches: $feature_branches"

            # Process each branch
            for branch in $feature_branches; do
              echo "Processing branch: $branch"

              # Exclude important branches
              if [[ "$branch" == "production" || "$branch" == "non-prod" || "$branch" == "development" ]]; then
                echo "Skipping important branch: $branch"
                continue
              fi

              # Get branch last commit date
              branch_date=$(gh api repos/$repo/commits/$branch --jq '.commit.committer.date' 2>&1 || echo "ERROR")
              if [[ "$branch_date" == "ERROR" ]]; then
                echo "Failed to fetch commit date for branch: $branch. Skipping..."
                continue
              fi

              # Convert date to timestamp
              branch_timestamp=$(date -d "$branch_date" +%s 2>/dev/null || echo "ERROR")
              if [[ "$branch_timestamp" == "ERROR" ]]; then
                echo "Failed to parse date for branch: $branch. Skipping..."
                continue
              fi

              # Check if branch is stale (older than 6 months)
              if [[ "$branch_timestamp" -le "$CUTOFF_TIME" ]]; then
                echo "Deleting stale branch: $branch (older than 6 months)"
                gh api -X DELETE repos/$repo/git/refs/heads/$branch || echo "Failed to delete branch: $branch"
              else
                echo "Branch $branch is not stale. Skipping..."
              fi
            done
          done